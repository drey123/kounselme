Your collegue gave me some ideas and since i am a bad coder i will be sending you everything and you can help me create cleans codes but lwt me send them to you first

Confirming Our Phase 1 Architecture Strategy
Yes, your friend's analysis perfectly aligns with what we've been discussing. Let me confirm our Phase 1 architecture approach:
Definitive Phase 1 Plan:
1. No LangChain - We are not using LangChain in Phase 1
   * Direct API integration with OpenAI and Together.ai
   * No unnecessary framework overhead
   * Cleaner, simpler codebase
2. DeepSeek via Together.ai for summarization
   * Better performance than T5 on emotional understanding
   * More cost-effective (~$0.0002-$0.0006 per 1K tokens)
   * Simpler implementation (no Lambda setup required)
3. Context Management
   * SQLite for local storage of full chat history
   * In-memory sliding window (5-10 messages) for real-time context
   * Periodic summarization with DeepSeek
4. Vector Storage Later
   * No FAISS or vector databases in Phase 1
   * Plan to introduce in Phase 2/3 when you have significant user volume
Your friend's code sample with Fastify and direct API integration looks solid - it demonstrates exactly the approach we want to take for the initial implementation.
This architecture gives you the best balance of:
* Fast development (important with limited technical background)
* Cost efficiency (pay-as-you-go with no fixed costs)
* Future scalability (foundation for adding vector search later)
* Simplicity (fewer moving parts to debug and maintain)

I need to refine my KounselMe app implementation to ensure it aligns with our Phase 1 architecture decisions. My current structure is in place, but I need help implementing or correcting the following key components:
## WebSocket Implementation
- Confirm uWebSockets.js integration in my server.js
- Create a proper WebSocket client implementation in Flutter
- Ensure real-time message handling with proper state management
## API Integration
- Implement direct OpenAI API integration for chat responses
- Set up Together.ai API for DeepSeek summarization (NOT using LangChain)
- Create a throttling/caching layer to minimize API costs
## Database Sync
- Implement SQLite to Neon PostgreSQL synchronization logic
- Add proper conflict resolution for offline-first functionality
- Ensure sensitive data stays local while only metadata syncs to cloud
## Error Handling
- Add comprehensive error handling for API calls
- Implement offline detection and graceful degradation
- Add retry logic for failed API or database operations
## Authentication Refinement
- Complete Supabase Auth integration with proper session management
- Implement secure token storage and refresh logic
- Add user profile syncing between Supabase and local storage
Please provide implementation code for these components that follows best practices, avoids hard-coding values, and maintains a clean, maintainable architecture. Each component should include clear documentation and error handling.

i use iconsax and also i am replacing pp neulmentreal to manrope and also id like to have a theme.dart so that it looks cleaner also i already have accesst with the inter and mansope font in it kounselme\assets\fonts\Inter and manrope for the other

A real code and implementation since i am bad at coding i have no option but to fall to you but first lets create the structure in vs code for the phase 1 part one and then we will turn the images too to real code incase you need to add things i also sent the propots for the image ..as you can see the p,rot was well deatiled.. make sure the codes are legit i do it to be very clean and mabe keep the content in a seperate file so that it is easy to correct and just use string lol .. dont dissapoint me i m using power sell in svs code so lets first create a strcuture